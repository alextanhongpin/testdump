!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/alextanhongpin/Documents/golang/src/github.com/alextanhongpin/dump/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210516.0/
ANSI	http/diff.go	/^	ANSI bool$/;"	m	struct:http.DiffError	typeref:typename:bool
ANSI	http/error.go	/^	ANSI bool$/;"	m	struct:http.DiffError	typeref:typename:bool
ANSIDiff	http/diff.go	/^func ANSIDiff(x, y any, opts ...cmp.Option) error {$/;"	f	package:http	typeref:typename:error
ANSIDiff	http/error.go	/^func ANSIDiff(x, y any, opts ...cmp.Option) error {$/;"	f	package:http	typeref:typename:error
Body	http/dump.go	/^	Body    []cmp.Option$/;"	m	struct:http.CompareOption	typeref:typename:[]cmp.Option
Body	http/dump.go	/^	Body    any         `json:"body"`$/;"	m	struct:http.Dump	typeref:typename:any
ChainInterceptor	http/interceptor.go	/^type ChainInterceptor[T any] []Interceptor[T]$/;"	t	package:http	typeref:typename:[T any] []Interceptor
CloneRequest	http/internal/request.go	/^func CloneRequest(r *http.Request) (*http.Request, error) {$/;"	f	package:internal	typeref:typename:(*http.Request, error)
CloneResponse	http/internal/response.go	/^func CloneResponse(w *http.Response) (*http.Response, error) {$/;"	f	package:internal	typeref:typename:(*http.Response, error)
Compare	http/dump.go	/^func (x *Dump) Compare(y *Dump, opt *CompareOption) error {$/;"	f	struct:http.Dump	typeref:typename:error
CompareOption	http/dump.go	/^type CompareOption struct {$/;"	s	package:http
Diff	http/diff.go	/^	Diff string$/;"	m	struct:http.DiffError	typeref:typename:string
Diff	http/error.go	/^	Diff string$/;"	m	struct:http.DiffError	typeref:typename:string
DiffError	http/diff.go	/^type DiffError struct {$/;"	s	package:http
DiffError	http/error.go	/^type DiffError struct {$/;"	s	package:http
Dump	http/dump.go	/^type Dump struct {$/;"	s	package:http
DumpRequest	http/internal/request.go	/^func DumpRequest(r *http.Request, pretty bool) ([]byte, error) {$/;"	f	package:internal	typeref:typename:([]byte, error)
DumpRequest	http/rqeuest.go	/^func DumpRequest(r *http.Request) ([]byte, error) {$/;"	f	package:http	typeref:typename:([]byte, error)
DumpResponse	http/internal/response.go	/^func DumpResponse(r *http.Response, pretty bool) ([]byte, error) {$/;"	f	package:internal	typeref:typename:([]byte, error)
Error	http/diff.go	/^func (d *DiffError) Error() string {$/;"	f	struct:http.DiffError	typeref:typename:string
Error	http/error.go	/^func (d *DiffError) Error() string {$/;"	f	struct:http.DiffError	typeref:typename:string
FS	http/http.go	/^	FS               fs.FS$/;"	m	struct:http.Handler	typeref:typename:fs.FS
FormatRequestLine	http/internal/request.go	/^func FormatRequestLine(req *http.Request) string {$/;"	f	package:internal	typeref:typename:string
FormatResponseLine	http/internal/response.go	/^func FormatResponseLine(r *http.Response) string {$/;"	f	package:internal	typeref:typename:string
FromRequest	http/rqeuest.go	/^func FromRequest(r *http.Request) (*Dump, error) {$/;"	f	package:http	typeref:typename:(*Dump, error)
Handler	http/http.go	/^type Handler struct {$/;"	s	package:http
Handler	http/main.go	/^type Handler struct {$/;"	s	package:http
Header	http/dump.go	/^	Header  []cmp.Option$/;"	m	struct:http.CompareOption	typeref:typename:[]cmp.Option
Header	http/dump.go	/^	Header  http.Header `json:"header"`$/;"	m	struct:http.Dump	typeref:typename:http.Header
IgnoreMapEntries	http/cmp.go	/^func IgnoreMapEntries(keys ...string) cmp.Option {$/;"	f	package:http	typeref:typename:cmp.Option
Intercept	http/interceptor.go	/^func (c ChainInterceptor[T]) Intercept(v T) error {$/;"	f	unknown:http.T	typeref:typename:error
Interceptor	http/interceptor.go	/^type Interceptor[T any] interface {$/;"	t	package:http	typeref:typename:[T any] interface { Intercept(T) error;}
Line	http/dump.go	/^	Line    string      `json:"line"`$/;"	m	struct:http.Dump	typeref:typename:string
MaskRequestHeader	http/middleware.go	/^func MaskRequestHeader(mask string, fields ...string) Middleware {$/;"	f	package:http	typeref:typename:Middleware
MaskResponseHeader	http/middleware.go	/^func MaskResponseHeader(mask string, fields ...string) Middleware {$/;"	f	package:http	typeref:typename:Middleware
Middleware	http/middleware.go	/^type Middleware func(w *http.Response, r *http.Request) error$/;"	t	package:http	typeref:typename:func(w *http.Response, r *http.Request) error
Middlewares	http/http.go	/^	Middlewares      []Middleware$/;"	m	struct:http.Handler	typeref:typename:[]Middleware
NewHandler	http/http.go	/^func NewHandler(t *testing.T, h http.Handler, middlewares ...Middleware) *Handler {$/;"	f	package:http	typeref:typename:*Handler
NewHandlerFunc	http/http.go	/^func NewHandlerFunc(t *testing.T, h http.HandlerFunc, middlewares ...Middleware) *Handler {$/;"	f	package:http	typeref:typename:*Handler
NewRequestDump	http/dump.go	/^func NewRequestDump(r *http.Request) (*Dump, error) {$/;"	f	package:http	typeref:typename:(*Dump, error)
NewResponseDump	http/dump.go	/^func NewResponseDump(r *http.Response) (*Dump, error) {$/;"	f	package:http	typeref:typename:(*Dump, error)
NormalizeRequest	http/internal/request.go	/^func NormalizeRequest(r *http.Request, pretty bool) error {$/;"	f	package:internal	typeref:typename:error
NormalizeResponse	http/internal/response.go	/^func NormalizeResponse(w *http.Response, pretty bool) error {$/;"	f	package:internal	typeref:typename:error
Read	http/dump.go	/^func Read(b []byte) (w *http.Response, r *http.Request, err error) {$/;"	f	package:http	typeref:typename:(w *http.Response, r *http.Request, err error)
ReadRequest	http/rqeuest.go	/^func ReadRequest(b []byte) (*http.Request, error) {$/;"	f	package:http	typeref:typename:(*http.Request, error)
RequestComparer	http/http.go	/^	RequestComparer  *CompareOption$/;"	m	struct:http.Handler	typeref:typename:*CompareOption
ResponseComparer	http/http.go	/^	ResponseComparer *CompareOption$/;"	m	struct:http.Handler	typeref:typename:*CompareOption
ResponseWriter	http/main.go	/^	http.ResponseWriter$/;"	M	struct:http.responseWriter	typeref:typename:http.ResponseWriter
ServeHTTP	http/http.go	/^func (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {$/;"	f	struct:http.Handler
ServeHTTP	http/main.go	/^func (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {$/;"	f	struct:http.Handler
TestDump	http/http_test.go	/^func TestDump(t *testing.T) {$/;"	f	package:http_test
TestHTTP	http/http_test.go	/^func TestHTTP(t *testing.T) {$/;"	f	package:http_test
TestJSON	http/http_test.go	/^func TestJSON(t *testing.T) {$/;"	f	package:http_test
TestJSONCreate	http/http_test.go	/^func TestJSONCreate(t *testing.T) {$/;"	f	package:http_test
TestMiddleware	http/http_test.go	/^func TestMiddleware(t *testing.T) {$/;"	f	package:http_test
TestMiddlewareChain	http/http_test.go	/^func TestMiddlewareChain(t *testing.T) {$/;"	f	package:http_test
Trailer	http/dump.go	/^	Trailer []cmp.Option$/;"	m	struct:http.CompareOption	typeref:typename:[]cmp.Option
Trailer	http/dump.go	/^	Trailer http.Header `json:"trailer"`$/;"	m	struct:http.Dump	typeref:typename:http.Header
Write	http/dump.go	/^func Write(w *http.Response, r *http.Request) ([]byte, error) {$/;"	f	package:http	typeref:typename:([]byte, error)
Write	http/main.go	/^func (w *responseWriter) Write(b []byte) (int, error) {$/;"	f	struct:http.responseWriter	typeref:typename:(int, error)
WriteFile	http/fs.go	/^func WriteFile(name string, body []byte, overwrite bool) error {$/;"	f	package:http	typeref:typename:error
WriteFile	http/internal/fs.go	/^func WriteFile(name string, body []byte, overwrite bool) (bool, error) {$/;"	f	package:internal	typeref:typename:(bool, error)
ansiDiff	http/diff.go	/^func ansiDiff(diff string) string {$/;"	f	package:http	typeref:typename:string
ansiDiff	http/error.go	/^func ansiDiff(diff string) string {$/;"	f	package:http	typeref:typename:string
b	http/main.go	/^	b []byte$/;"	m	struct:http.responseWriter	typeref:typename:[]byte
color	http/diff.go	/^func color(code int, s string) string {$/;"	f	package:http	typeref:typename:string
color	http/error.go	/^func color(code int, s string) string {$/;"	f	package:http	typeref:typename:string
compare	http/http.go	/^func (h *Handler) compare(requestOrResponse string, snapshot, received *Dump) error {$/;"	f	struct:http.Handler	typeref:typename:error
dump	http/http.go	/^func (h *Handler) dump(w *http.Response, r *http.Request) error {$/;"	f	struct:http.Handler	typeref:typename:error
escapeCode	http/diff.go	/^func escapeCode(code int) string {$/;"	f	package:http	typeref:typename:string
escapeCode	http/error.go	/^func escapeCode(code int) string {$/;"	f	package:http	typeref:typename:string
formatRequestLine	http/rqeuest.go	/^func formatRequestLine(req *http.Request) string {$/;"	f	package:http	typeref:typename:string
green	http/diff.go	/^func green(s string) string {$/;"	f	package:http	typeref:typename:string
green	http/error.go	/^func green(s string) string {$/;"	f	package:http	typeref:typename:string
h	http/http.go	/^	h                http.Handler$/;"	m	struct:http.Handler	typeref:typename:http.Handler
h	http/main.go	/^	h http.Handler$/;"	m	struct:http.Handler	typeref:typename:http.Handler
http	http/cmp.go	/^package http$/;"	p
http	http/diff.go	/^package http$/;"	p
http	http/dump.go	/^package http$/;"	p
http	http/error.go	/^package http$/;"	p
http	http/fs.go	/^package http$/;"	p
http	http/http.go	/^package http$/;"	p
http	http/interceptor.go	/^package http$/;"	p
http	http/main.go	/^package http$/;"	p
http	http/middleware.go	/^package http$/;"	p
http	http/request.go	/^package http$/;"	p
http	http/response.go	/^package http$/;"	p
http	http/rqeuest.go	/^package http$/;"	p
http	http/transform.go	/^package http$/;"	p
http_test	http/http_test.go	/^package http_test$/;"	p
httpdump	http/http_test.go	/^	httpdump "github.com\/alextanhongpin\/dump\/http"$/;"	P	package:github.com/alextanhongpin/dump/http
init	http/main.go	/^func init() {$/;"	f	package:http
internal	http/internal/fs.go	/^package internal$/;"	p
internal	http/internal/request.go	/^package internal$/;"	p
internal	http/internal/response.go	/^package internal$/;"	p
internal	http/internal/transform.go	/^package internal$/;"	p
normalizeRequest	http/rqeuest.go	/^func normalizeRequest(r *http.Request) (*http.Request, error) {$/;"	f	package:http	typeref:typename:(*http.Request, error)
prettyBytes	http/internal/transform.go	/^func prettyBytes(b []byte) ([]byte, error) {$/;"	f	package:internal	typeref:typename:([]byte, error)
red	http/diff.go	/^func red(s string) string {$/;"	f	package:http	typeref:typename:string
red	http/error.go	/^func red(s string) string {$/;"	f	package:http	typeref:typename:string
requestFile	http/dump.go	/^const requestFile = "request.http"$/;"	c	package:http
requestToDump	http/rqeuest.go	/^func requestToDump(r *http.Request) (*Dump, error) {$/;"	f	package:http	typeref:typename:(*Dump, error)
responseFile	http/dump.go	/^const responseFile = "response.http"$/;"	c	package:http
responseWriter	http/main.go	/^type responseWriter struct {$/;"	s	package:http
t	http/http.go	/^	t                *testing.T$/;"	m	struct:http.Handler	typeref:typename:*testing.T
textDiff	http/diff.go	/^func textDiff(diff string) string {$/;"	f	package:http	typeref:typename:string
textDiff	http/error.go	/^func textDiff(diff string) string {$/;"	f	package:http	typeref:typename:string
valueOrDefault	http/rqeuest.go	/^func valueOrDefault(v, d string) string {$/;"	f	package:http	typeref:typename:string
